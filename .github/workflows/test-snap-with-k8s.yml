name: Test sunbeam with k8s operator

on:
  workflow_dispatch:
    inputs:
      k8s-provider:
        description: Select k8s provider
        required: true
        default: k8s
        type: choice
        options:
        - microk8s
        - k8s
      snap-channel:
        description: Specify openstack snap channel
        required: true
        default: 2024.1/edge
        type: string

jobs:
  functional-test:
    name: Functional test
    runs-on: [self-hosted, large, jammy, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: test
        run: |
          export COLUMNS=256
          sudo snap install openstack --channel ${{ inputs.snap-channel }}
          sudo snap set openstack k8s.provider=${{ inputs.k8s-provider }}
          sunbeam prepare-node-script | bash -x
          sg snap_daemon "sunbeam cluster bootstrap --manifest .github/assets/k8s/edge.yml --accept-defaults --topology single --database single"
          sg snap_daemon "sunbeam cluster list"
          # Note: Moving configure before enabling caas just to ensure caas images are not downloaded
          # To download caas image, require ports to open on firewall to access fedora images.
          sg snap_daemon "sunbeam configure -a"
          sg snap_daemon "sunbeam launch"
          sg snap_daemon "sunbeam enable orchestration"
          sg snap_daemon "sunbeam enable loadbalancer"
          sg snap_daemon "sunbeam enable dns --nameservers=testing.github."
          sg snap_daemon "sunbeam enable telemetry"
          sg snap_daemon "sunbeam enable observability"
          sg snap_daemon "sunbeam enable vault"
          sg snap_daemon "sunbeam enable secrets"
          sg snap_daemon "sunbeam enable caas"
          sg snap_daemon "sunbeam enable images-sync"
          # sg snap_daemon "sunbeam enable validation"
          # If smoke tests fails, logs should be collected via sunbeam command in "Collect logs"
          # sg snap_daemon "sunbeam validation run smoke"
          # sg snap_daemon "sunbeam validation run --output tempest_validation.log"
          sg snap_daemon "sunbeam disable images-sync"
          sg snap_daemon "sunbeam disable caas"
          sg snap_daemon "sunbeam disable secrets"
          sg snap_daemon "sunbeam disable vault"
          # Commented disabling observability due to LP#1998282
          # sg snap_daemon "sunbeam disable observability"
          # sg snap_daemon "sunbeam disable telemetry"
          sg snap_daemon "sunbeam disable dns"
          sg snap_daemon "sunbeam disable loadbalancer"
          sg snap_daemon "sunbeam disable orchestration"
          # sg snap_daemon "sunbeam disable validation"

      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          if [ ${{ inputs.k8s-provider }} == "k8s" ]; then kubectl="k8s kubectl"; else kubectl="microk8s.kubectl"; fi
          cp -rf $HOME/snap/openstack/common/logs/*.log logs/
          models=$(juju models --format json | jq -r .models[].name)
          for model in $models;
          do
            name=$(echo $model | cut -d/ -f2);
            juju status -m $model -o logs/$name.yaml;
            cat logs/$name.yaml;
            juju debug-log -m $model --replay &> logs/$name-debug-log.txt || echo "Not able to get logs for model $model"
            for pod in $(sudo $kubectl get pods -n $name -o=jsonpath='{.items[*].metadata.name}');
            do
              sudo $kubectl logs --ignore-errors -n $name --all-containers $pod &> logs/$pod.log || echo "Not able to get log for $pod"
            done
          done
          # if test -f tempest_validation.log; then cp tempest_validation.log logs/; fi
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sunbeam_logs
          path: logs
          retention-days: 30
      - name: Setup tmate session
        if: ${{ failure() && runner.debug }}
        uses: canonical/action-tmate@main
